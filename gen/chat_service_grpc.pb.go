// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: chat_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupChatClient is the client API for GroupChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupChatClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error)
	AppendChat(ctx context.Context, in *AppendChatRequest, opts ...grpc.CallOption) (*AppendChatResponse, error)
	LikeChat(ctx context.Context, in *LikeChatRequest, opts ...grpc.CallOption) (*LikeChatResponse, error)
	RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error)
	PrintHistory(ctx context.Context, in *PrintHistoryRequest, opts ...grpc.CallOption) (*PrintHistoryResponse, error)
}

type groupChatClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupChatClient(cc grpc.ClientConnInterface) GroupChatClient {
	return &groupChatClient{cc}
}

func (c *groupChatClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/GroupChat/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatResponse, error) {
	out := new(JoinChatResponse)
	err := c.cc.Invoke(ctx, "/GroupChat/JoinChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatClient) AppendChat(ctx context.Context, in *AppendChatRequest, opts ...grpc.CallOption) (*AppendChatResponse, error) {
	out := new(AppendChatResponse)
	err := c.cc.Invoke(ctx, "/GroupChat/AppendChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatClient) LikeChat(ctx context.Context, in *LikeChatRequest, opts ...grpc.CallOption) (*LikeChatResponse, error) {
	out := new(LikeChatResponse)
	err := c.cc.Invoke(ctx, "/GroupChat/LikeChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatClient) RemoveLike(ctx context.Context, in *RemoveLikeRequest, opts ...grpc.CallOption) (*RemoveLikeResponse, error) {
	out := new(RemoveLikeResponse)
	err := c.cc.Invoke(ctx, "/GroupChat/RemoveLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupChatClient) PrintHistory(ctx context.Context, in *PrintHistoryRequest, opts ...grpc.CallOption) (*PrintHistoryResponse, error) {
	out := new(PrintHistoryResponse)
	err := c.cc.Invoke(ctx, "/GroupChat/PrintHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupChatServer is the server API for GroupChat service.
// All implementations must embed UnimplementedGroupChatServer
// for forward compatibility
type GroupChatServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error)
	AppendChat(context.Context, *AppendChatRequest) (*AppendChatResponse, error)
	LikeChat(context.Context, *LikeChatRequest) (*LikeChatResponse, error)
	RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error)
	PrintHistory(context.Context, *PrintHistoryRequest) (*PrintHistoryResponse, error)
	mustEmbedUnimplementedGroupChatServer()
}

// UnimplementedGroupChatServer must be embedded to have forward compatible implementations.
type UnimplementedGroupChatServer struct {
}

func (UnimplementedGroupChatServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGroupChatServer) JoinChat(context.Context, *JoinChatRequest) (*JoinChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedGroupChatServer) AppendChat(context.Context, *AppendChatRequest) (*AppendChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendChat not implemented")
}
func (UnimplementedGroupChatServer) LikeChat(context.Context, *LikeChatRequest) (*LikeChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeChat not implemented")
}
func (UnimplementedGroupChatServer) RemoveLike(context.Context, *RemoveLikeRequest) (*RemoveLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLike not implemented")
}
func (UnimplementedGroupChatServer) PrintHistory(context.Context, *PrintHistoryRequest) (*PrintHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintHistory not implemented")
}
func (UnimplementedGroupChatServer) mustEmbedUnimplementedGroupChatServer() {}

// UnsafeGroupChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupChatServer will
// result in compilation errors.
type UnsafeGroupChatServer interface {
	mustEmbedUnimplementedGroupChatServer()
}

func RegisterGroupChatServer(s grpc.ServiceRegistrar, srv GroupChatServer) {
	s.RegisterService(&GroupChat_ServiceDesc, srv)
}

func _GroupChat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupChat/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChat_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupChat/JoinChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChat_AppendChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServer).AppendChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupChat/AppendChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServer).AppendChat(ctx, req.(*AppendChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChat_LikeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServer).LikeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupChat/LikeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServer).LikeChat(ctx, req.(*LikeChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChat_RemoveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServer).RemoveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupChat/RemoveLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServer).RemoveLike(ctx, req.(*RemoveLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupChat_PrintHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupChatServer).PrintHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GroupChat/PrintHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupChatServer).PrintHistory(ctx, req.(*PrintHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupChat_ServiceDesc is the grpc.ServiceDesc for GroupChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GroupChat",
	HandlerType: (*GroupChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _GroupChat_Login_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _GroupChat_JoinChat_Handler,
		},
		{
			MethodName: "AppendChat",
			Handler:    _GroupChat_AppendChat_Handler,
		},
		{
			MethodName: "LikeChat",
			Handler:    _GroupChat_LikeChat_Handler,
		},
		{
			MethodName: "RemoveLike",
			Handler:    _GroupChat_RemoveLike_Handler,
		},
		{
			MethodName: "PrintHistory",
			Handler:    _GroupChat_PrintHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat_service.proto",
}
